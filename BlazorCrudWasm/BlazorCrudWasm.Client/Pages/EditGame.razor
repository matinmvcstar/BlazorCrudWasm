@page "/Edit-Game"
@page "/Edit-Game/{id:int}"
@inject HttpClient http
@inject NavigationManager Navi
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@if(Id == null)
{
    <h3>Create Game</h3>
}
else
{
    <h3>Edit: @Game.Title</h3>
}

<EditForm Model="Game" OnSubmit="HandleSubmit">
    <div>
        <label for="Title">Tile</label>
        <InputText id="@Game.Title" @bind-Value="Game.Title" class="form-control" />
    </div>
    <div>
        <label for="Publisher">Publisher</label>
        <InputText id="@Game.Publisher" @bind-Value="Game.Publisher" class="form-control" />
    </div>
    <div>
        <label for="ReleaseYear">ReleaseYear</label>
        <InputNumber id="@Game.ReleaseYear" @bind-Value="Game.ReleaseYear" class="form-control" />
    </div>
    <button type="submit" class="btn btn-success">Save</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    public VideoGame Game { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await http.GetFromJsonAsync<VideoGame>($"api/videogames/{(int)Id}");
            if (result is not null)
                Game = result;
        }
    }

    async Task HandleSubmit()
    {
        if(Id is not null)
        {
            var result = await http.PutAsJsonAsync($"api/videogames/{(int)Id}", Game);
            Game = await result.Content.ReadFromJsonAsync<VideoGame>();
            Navi.NavigateTo("VideoGames");
        }
        else
        {
            var result = await http.PostAsJsonAsync($"api/videogames", Game);
            Game = await result.Content.ReadFromJsonAsync<VideoGame>();
            Navi.NavigateTo("VideoGames");
        }
    }
}
